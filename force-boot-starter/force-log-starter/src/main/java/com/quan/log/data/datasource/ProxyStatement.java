package com.quan.log.data.datasource;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.function.Function;
import java.util.function.Supplier;

public class ProxyStatement implements Statement {

    private final Statement statement;

    protected final Recorder recorder;

    public ProxyStatement(Statement statement) {
        this.statement = statement;
        this.recorder = new Recorder(this.statement);
    }

    @Override
    public ResultSet executeQuery(String sql) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeQuery(sql), sql, ExecuteType.ExecuteQuery);
    }


    @Override
    public int executeUpdate(String sql) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeUpdate(sql), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public boolean execute(String sql) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.execute(sql), sql, ExecuteType.Execute);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.execute(sql, autoGeneratedKeys), sql, ExecuteType.Execute);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.execute(sql, columnIndexes), sql, ExecuteType.Execute);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.execute(sql, columnNames), sql, ExecuteType.Execute);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeUpdate(sql, autoGeneratedKeys), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeUpdate(sql, columnIndexes), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeUpdate(sql, columnNames), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public int[] executeBatch() throws java.sql.SQLException {
        return recorder.execute(this.statement::executeBatch, null, ExecuteType.ExecuteBatch);
    }

    @Override
    public long[] executeLargeBatch() throws java.sql.SQLException {
        return recorder.execute(this.statement::executeLargeBatch, null, ExecuteType.ExecuteBatch);
    }

    @Override
    public long executeLargeUpdate(String sql) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeLargeUpdate(sql), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeLargeUpdate(sql, autoGeneratedKeys), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeLargeUpdate(sql, columnIndexes), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws java.sql.SQLException {
        return recorder.execute(() -> this.statement.executeLargeUpdate(sql, columnNames), sql, ExecuteType.ExecuteUpdate);
    }

    @Override
    public void close() throws java.sql.SQLException {
        //recorder.print();
        this.statement.close();
    }

    @Override
    public int getMaxFieldSize() throws java.sql.SQLException {
        return this.statement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws java.sql.SQLException {
        this.statement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws java.sql.SQLException {
        return this.statement.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws java.sql.SQLException {
        this.statement.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws java.sql.SQLException {
        this.statement.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws java.sql.SQLException {
        return this.statement.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws java.sql.SQLException {
        this.statement.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws java.sql.SQLException {
        this.statement.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws java.sql.SQLException {
        return this.statement.getWarnings();
    }

    @Override
    public void clearWarnings() throws java.sql.SQLException {
        this.statement.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws java.sql.SQLException {
        this.statement.setCursorName(name);
    }


    @Override
    public ResultSet getResultSet() throws java.sql.SQLException {
        return this.statement.getResultSet();
    }

    @Override
    public int getUpdateCount() throws java.sql.SQLException {
        return this.statement.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws java.sql.SQLException {
        return this.statement.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws java.sql.SQLException {
        this.statement.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws java.sql.SQLException {
        return this.statement.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws java.sql.SQLException {
        this.statement.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws java.sql.SQLException {
        return this.statement.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws java.sql.SQLException {
        return this.statement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws java.sql.SQLException {
        return this.statement.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws java.sql.SQLException {
        recorder.addBatch(sql);
        this.statement.addBatch(sql);
    }

    @Override
    public void clearBatch() throws java.sql.SQLException {
        recorder.clearBatch();
        if (this.statement == null) {
            return;
        }
        this.statement.clearBatch();
    }

    @Override
    public Connection getConnection() throws java.sql.SQLException {
        return this.statement.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws java.sql.SQLException {
        return this.statement.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws java.sql.SQLException {
        return this.statement.getGeneratedKeys();
    }


    @Override
    public int getResultSetHoldability() throws java.sql.SQLException {
        return this.statement.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws java.sql.SQLException {
        return this.statement.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws java.sql.SQLException {
        this.statement.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws java.sql.SQLException {
        return this.statement.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws java.sql.SQLException {
        this.statement.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws java.sql.SQLException {
        return this.statement.isCloseOnCompletion();
    }

    @Override
    public long getLargeUpdateCount() throws java.sql.SQLException {
        return this.statement.getLargeUpdateCount();
    }

    @Override
    public void setLargeMaxRows(long max) throws java.sql.SQLException {
        this.statement.setLargeMaxRows(max);
    }

    @Override
    public long getLargeMaxRows() throws java.sql.SQLException {
        return this.statement.getLargeMaxRows();
    }


    @Override
    public <T> T unwrap(Class<T> iface) throws java.sql.SQLException {
        return this.statement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws java.sql.SQLException {
        return this.statement.isWrapperFor(iface);
    }

}
